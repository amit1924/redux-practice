// This file defines a Redux slice named "cartSlice" using the createSlice function from Redux Toolkit.
// The cartSlice handles the state related to the shopping cart in the application.

// Import necessary dependencies
import { createSlice } from "@reduxjs/toolkit";
import productData from "../productData.js"; // Importing sample product data

// Define initial state for the cartSlice
const initialState = {
  cart: [], // Array to store items in the cart
  items: productData, // Array to store available items in the store
  totalQuantity: 0, // Total quantity of items in the cart
  totalPrice: 0, // Total price of items in the cart
};

// Create the cartSlice using createSlice
export const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState: initialState, // Initial state defined above
  reducers: {
    // Action to add an item to the cart
    addToCart: (state, action) => {
      const { id } = action.payload; // Extracting id from the payload
      // console.log(id);
      const existingItemIndex = state.cart.findIndex((item) => item.id === id); // Finding index of the item in the cart array
      // console.log(existingItemIndex);

      // If the item already exists in the cart, increase its quantity
      if (existingItemIndex !== -1) {
        state.cart[existingItemIndex].quantity += 1;
      }
      // If the item does not exist in the cart, add it with quantity 1
      else {
        state.cart.push({ ...action.payload, quantity: 1 });
      }

      // Update total quantity and total price
      state.totalQuantity += 1;
      state.totalPrice += action.payload.price;
    },

    // Action to remove an item from the cart
    // removeFromCart: (state, action) => {
    //   const { id } = action.payload; // Extracting id from the payload
    //   const existingItemIndex = state.cart.findIndex((item) => item.id === id); // Finding index of the item in the cart array

    //   // If the item exists in the cart, remove it and update total quantity and total price
    //   if (existingItemIndex !== -1) {
    //     state.totalQuantity -= state.cart[existingItemIndex].quantity;
    //     state.totalPrice -=
    //       state.cart[existingItemIndex].price *
    //       state.cart[existingItemIndex].quantity;
    //     state.cart.splice(existingItemIndex, 1);
    //   }
    // },

    //OR

    removeFromCart: (state, action) => {
      const { id } = action.payload; // Extracting id from the payload

      // Filter out the item with the specified ID
      state.cart = state.cart.filter((item) => item.id !== id);

      // Update total quantity and total price
      state.totalQuantity = state.cart.reduce(
        (total, item) => total + item.quantity,
        0
      );
      state.totalPrice = state.cart.reduce(
        (total, item) => total + item.price * item.quantity,
        0
      );
    },

    // Action to increase quantity of an item in the cart
    increaseQuantity: (state, action) => {
      const { id } = action.payload; // Extracting id from the payload
      const existingItemIndex = state.cart.findIndex((item) => item.id === id); // Finding index of the item in the cart array
      // console.log(existingItemIndex);
      // If the item exists in the cart, increase its quantity and update total quantity and total price
      if (existingItemIndex !== -1) {
        state.cart[existingItemIndex].quantity += 1;
        state.totalQuantity += 1;
        state.totalPrice += state.cart[existingItemIndex].price;
      }
    },

    // Action to decrease quantity of an item in the cart
    decreaseQuantity: (state, action) => {
      const { id } = action.payload; // Extracting id from the payload
      const existingItemIndex = state.cart.findIndex((item) => item.id === id); // Finding index of the item in the cart array

      // If the item exists in the cart and its quantity is greater than 1, decrease its quantity and update total quantity and total price
      if (
        existingItemIndex !== -1 &&
        state.cart[existingItemIndex].quantity > 1
      ) {
        state.cart[existingItemIndex].quantity -= 1;
        state.totalQuantity -= 1;
        state.totalPrice -= state.cart[existingItemIndex].price;
      }
    },
  },
});

// Export action creators from the cartSlice
export const { addToCart, removeFromCart, increaseQuantity, decreaseQuantity } =
  cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice.reducer;
